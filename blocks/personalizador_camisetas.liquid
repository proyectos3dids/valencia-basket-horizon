{% comment %}
  Sección de personalización de camisetas con sliders para configurar posición y tamaño
{% endcomment %}

<script>
  // Establecer variable global para el estado de los controles avanzados
  window.personalizadorDebugMode = true; // Temporalmente habilitado para diagnosticar
  window.isUnisexProduct = {{ block.settings.is_unisex_product | json }};
  
  // Funcionalidad para productos unisex
  document.addEventListener('DOMContentLoaded', function() {
    if (window.isUnisexProduct) {
      const genderOptions = document.querySelectorAll('.gender-option');
      const playerSelect = document.getElementById('customization_player');
      const maleOptions = playerSelect.querySelectorAll('.male-players');
      const femaleOptions = playerSelect.querySelectorAll('.female-players');
      
      // Función para seleccionar género
       window.selectGender = function(element) {
         const selectedGender = element.dataset.value;
         const container = document.querySelector('.personalizador-container') || document.body;
         
         // Actualizar opciones activas
         genderOptions.forEach(opt => opt.classList.remove('active'));
         element.classList.add('active');
         
         // Actualizar campo oculto
         document.getElementById('selected_gender').value = selectedGender;
         
         // Actualizar parámetros de URL si existe el SearchParamsHandler
         if (window.ProductCustomization && window.ProductCustomization.searchParams) {
           window.ProductCustomization.searchParams.setGender(selectedGender);
         }
         
         // Actualizar clases del contenedor para CSS
         container.classList.remove('male-selected', 'female-selected');
         container.classList.add('unisex-product', selectedGender + '-selected');
         
         // Obtener los optgroups correctos
         const maleOptgroup = playerSelect.querySelector('.male-players');
         const femaleOptgroup = playerSelect.querySelector('.female-players');
         
         // Mostrar/ocultar opciones de jugadores
          if (selectedGender === 'male') {
            if (maleOptgroup) {
              maleOptgroup.style.display = 'block';
              // Habilitar todas las opciones masculinas
              const maleOptions = maleOptgroup.querySelectorAll('option');
              maleOptions.forEach(option => option.disabled = false);
            }
            if (femaleOptgroup) {
              femaleOptgroup.style.display = 'none';
              // Deshabilitar todas las opciones femeninas
              const femaleOptions = femaleOptgroup.querySelectorAll('option');
              femaleOptions.forEach(option => option.disabled = true);
            }
          } else {
            if (maleOptgroup) {
              maleOptgroup.style.display = 'none';
              // Deshabilitar todas las opciones masculinas
              const maleOptions = maleOptgroup.querySelectorAll('option');
              maleOptions.forEach(option => option.disabled = true);
            }
            if (femaleOptgroup) {
              femaleOptgroup.style.display = 'block';
              // Habilitar todas las opciones femeninas
              const femaleOptions = femaleOptgroup.querySelectorAll('option');
              femaleOptions.forEach(option => option.disabled = false);
            }
          }
         
         // Limpiar selección actual
         playerSelect.value = '';
         
         // Guardar género en URL si ProductCustomization está disponible
         if (window.ProductCustomization && window.ProductCustomization.searchParams) {
           window.ProductCustomization.searchParams.setGender(selectedGender);
         }
         
         if (window.personalizadorDebugMode) {
           console.log('Género seleccionado:', selectedGender);
           console.log('Optgroup masculino:', maleOptgroup);
           console.log('Optgroup femenino:', femaleOptgroup);
         }
       };
       
       // Inicializar con género masculino por defecto
       const defaultGender = document.querySelector('.gender-option[data-value="male"]');
       if (defaultGender) {
         window.selectGender(defaultGender);
       }
    }
    
    // Función para seleccionar parche de equipo
    window.selectTeamPatch = function(element) {
      const selectedPatch = element.dataset.value;
      const teamPatchOptions = document.querySelectorAll('.team-patch-option');
      
      // Actualizar opciones activas
      teamPatchOptions.forEach(opt => opt.classList.remove('active'));
      element.classList.add('active');
      
      // Actualizar campo oculto
      document.getElementById('selected_team_patch').value = selectedPatch;
      
      // Actualizar campo del formulario de compra
      const formField = document.getElementById('product_form_team_patch');
      if (formField) {
        const patchText = selectedPatch === 'male' ? 'Parche Masculino' : 'Parche Femenino';
        formField.value = patchText;
      }
      
      if (window.personalizadorDebugMode) {
        console.log('Parche de equipo seleccionado:', selectedPatch);
        console.log('Campo del formulario actualizado:', formField ? formField.value : 'Campo no encontrado');
      }
    };
    
    // Inicializar valor por defecto del parche al cargar la página
    const initializeDefaultPatch = function() {
      const enableTeamPatch = {{ block.settings.enable_team_patch_selection | json }};
      const showAdvancedControls = {{ block.settings.show_advanced_controls | json }};
      
      // Solo inicializar si el parche está habilitado en settings
      if (!enableTeamPatch && !showAdvancedControls) {
        if (window.personalizadorDebugMode) {
          console.log('Parche deshabilitado en settings - no inicializar');
        }
        return;
      }
      
      const defaultPatch = document.querySelector('.team-patch-option[data-value="male"]');
      const formField = document.getElementById('product_form_team_patch');
      
      if (window.personalizadorDebugMode) {
        console.log('Inicializando parche por defecto...');
        console.log('Elemento parche encontrado:', !!defaultPatch);
        console.log('Campo formulario encontrado:', !!formField);
      }
      
      if (defaultPatch && window.selectTeamPatch) {
        window.selectTeamPatch(defaultPatch);
      } else if (formField) {
        // Fallback: establecer directamente el valor si no se encuentra el elemento
        formField.value = 'Parche Masculino';
        const hiddenField = document.getElementById('selected_team_patch');
        if (hiddenField) {
          hiddenField.value = 'male';
        }
        if (window.personalizadorDebugMode) {
          console.log('Parche inicializado directamente:', formField.value);
        }
      }
    };
    
    // Ejecutar inicialización con un pequeño delay para asegurar que el DOM esté listo
    const executeInitialization = () => {
      setTimeout(initializeDefaultPatch, 100);
    };
    
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', executeInitialization);
    } else {
      executeInitialization();
    }
    
    // Debug: Verificar valores antes del envío del formulario
    document.addEventListener('submit', function(event) {
      if (event.target.matches('form[data-type="add-to-cart-form"]')) {
        const teamPatchField = document.getElementById('product_form_team_patch');
        const selectedPatchField = document.getElementById('selected_team_patch');
        
        if (window.personalizadorDebugMode) {
          console.log('🛒 ENVÍO DEL FORMULARIO - Valores de parche:');
          console.log('product_form_team_patch:', teamPatchField ? teamPatchField.value : 'Campo no encontrado');
          console.log('selected_team_patch:', selectedPatchField ? selectedPatchField.value : 'Campo no encontrado');
          
          // Mostrar todos los campos properties del formulario
          const form = event.target;
          const propertyInputs = form.querySelectorAll('input[name^="properties["]');
          console.log('Todos los campos properties:');
          propertyInputs.forEach(input => {
            console.log(`${input.name}: "${input.value}"`);
          });
        }
      }
    });
  });
</script>

{% if block.settings.debug_mode %}
<div class="debug-info" style="background: #f0f0f0; padding: 10px; margin-bottom: 20px; border: 1px solid #ccc; border-radius: 4px;">
  <h4>🐛 Debug Info</h4>
  <p><strong>Producto Unisex:</strong> {{ block.settings.is_unisex_product }}</p>
  <p><strong>Metaobjeto Masculino:</strong> {{ block.settings.players_metaobject_definition }}</p>
  <p><strong>Metaobjeto Femenino:</strong> {{ block.settings.female_players_metaobject_definition }}</p>
</div>
{% endif %}

<div class="product-customization-settings" data-block-type="personalizador_camisetas" data-free-customization="{{ block.settings.free_customization }}">
  {%- comment -%}
      <h3>{{ 'products.product.customization.settings_title' | t | default: 'Configuración de Personalización' }}</h3>
  {%- endcomment -%}
  
  <!-- Selector de tipo de personalización -->
  <div class="customization-type-wrapper">
    <label class="customization-label">Tipo de personalización:</label>
    <div class="customization-options">
      <div class="customization-option active" data-value="none" onclick="selectCustomizationType(this)">
        <span class="option-text">Sin personalización</span>
      </div>
      {% if block.settings.is_unisex_product %}
        {% comment %} Para productos unisex, mostrar ambas opciones si están habilitadas {% endcomment %}
        {% if block.settings.enable_player_option %}
        <div class="customization-option male-player-option" data-value="player" onclick="selectCustomizationType(this)">
          <span class="option-text">{{ block.settings.player_option_text | default: 'Jugador' }}</span>
          <span class="option-price">+15€</span>
        </div>
        {% endif %}
        {% if block.settings.enable_female_player_option %}
        <div class="customization-option female-player-option" data-value="player" onclick="selectCustomizationType(this)">
          <span class="option-text">{{ block.settings.female_player_option_text | default: 'Jugadora' }}</span>
          <span class="option-price">+15€</span>
        </div>
        {% endif %}
      {% else %}
        {% comment %} Para productos no unisex, mostrar solo la opción de jugador {% endcomment %}
        {% if block.settings.enable_player_option %}
        <div class="customization-option male-player-option" data-value="player" onclick="selectCustomizationType(this)">
          <span class="option-text">{{ block.settings.player_option_text | default: 'Jugador' }}</span>
          <span class="option-price">+15€</span>
        </div>
        {% endif %}
      {% endif %}
      {% if block.settings.enable_custom_option %}
      <div class="customization-option" data-value="user" onclick="selectCustomizationType(this)">
        <span class="option-text">Personalizado</span>
        <span class="option-price">+15€</span>
      </div>
      {% endif %}
    </div>
    <input type="hidden" id="customization_type" name="customization_type" value="none">
  </div>
  
  <!-- Selector de género eliminado - ahora se maneja con opciones separadas de jugador/jugadora -->
  
  {% if block.settings.enable_team_patch_selection or block.settings.show_advanced_controls %}
  <!-- Selector de parche de equipo -->
  <div class="team-patch-selection-wrapper" id="team-patch-selection-wrapper" style="display: none;">
    <label class="customization-label">Seleccionar parche de equipo:</label>
    <div class="team-patch-options">
      <div class="team-patch-option active" data-value="male" onclick="selectTeamPatch(this)">
        <span class="option-text">Parche Masculino</span>
      </div>
      <div class="team-patch-option" data-value="female" onclick="selectTeamPatch(this)">
        <span class="option-text">Parche Femenino</span>
      </div>
    </div>
    <input type="hidden" id="selected_team_patch" name="selected_team_patch" value="male">
  </div>
  {% endif %}
  
  <div class="customization-controls" id="customization-controls">
    {% if block.settings.show_advanced_controls %}
    <!-- Configuración del Nombre -->
    <div class="control-group">
      <h4>{{ 'products.product.customization.name_settings' | t | default: 'Configuración del Nombre' }}</h4>
      
      <div class="slider-control">
        <label for="name-size-slider">{{ 'products.product.customization.name_size' | t | default: 'Tamaño Nombre (px)' }}</label>
        <div class="field">
          <input type="range" id="name-size-slider" min="20" max="100" value="{{ block.settings.name_size | default: 37 }}" class="field__input customization-slider" data-setting="nameSize">
        </div>
        <span class="slider-value">{{ block.settings.name_size | default: 37 }}px</span>
      </div>
      
      <div class="slider-control">
        <label for="name-height-slider">{{ 'products.product.customization.name_height' | t | default: 'Altura Nombre Base (0-90%)' }}</label>
        <div class="field">
          <input type="range" id="name-height-slider" min="0" max="9" step="1" value="{{ block.settings.name_height_base | default: 1 }}" class="field__input customization-slider" data-setting="nameHeightBase">
        </div>
         <span class="slider-value">{{ block.settings.name_height_base | times: 10 | default: 10 }}%</span>
      </div>
      
      <div class="slider-control">
         <label for="name-fine-tune-slider">{{ 'products.product.customization.name_fine_tune' | t | default: 'Ajuste fino Nombre (+0-9%)' }}</label>
         <div class="field">
           <input type="range" id="name-fine-tune-slider" min="0" max="9" step="1" value="{{ block.settings.name_fine_tune | default: 5 }}" class="field__input customization-slider" data-setting="nameFineTune">
         </div>
          <span class="slider-value">+{{ block.settings.name_fine_tune | default: 5 }}%</span>
       </div>
      
      <div class="slider-control" style="display: none;">
        <label for="name-curve-slider">{{ 'products.product.customization.name_curve' | t | default: 'Curvatura Nombre' }}</label>
        <input type="range" id="name-curve-slider" min="0" max="500" value="0" class="customization-slider" data-setting="nameCurve" disabled>
        <span class="slider-value">0</span>
      </div>
    </div>
    
    <!-- Configuración del Dorsal -->
    <div class="control-group">
      <h4>{{ 'products.product.customization.number_settings' | t | default: 'Configuración del Dorsal' }}</h4>
      
      <div class="slider-control">
        <label for="number-size-slider">{{ 'products.product.customization.number_size' | t | default: 'Tamaño Dorsal (px)' }}</label>
        <div class="field">
          <input type="range" id="number-size-slider" min="30" max="250" step="5" value="{{ block.settings.number_size | default: 160 }}" class="field__input customization-slider" data-setting="numberSize">
        </div>
        <span class="slider-value">{{ block.settings.number_size | default: 160 }}px</span>
      </div>
      
      <div class="slider-control">
        <label for="number-height-base-slider">{{ 'products.product.customization.number_height' | t | default: 'Altura Dorsal Base (0-90%)' }}</label>
        <div class="field">
          <input type="range" id="number-height-base-slider" min="0" max="9" value="{{ block.settings.number_height_base | default: 4 }}" class="field__input customization-slider" data-setting="numberHeightBase">
        </div>
        <span class="slider-value" id="number-height-base-value">{{ block.settings.number_height_base | default: 4 | times: 10 }}%</span>
      </div>
      <div class="slider-control">
        <label for="number-fine-tune-slider">{{ 'products.product.customization.number_fine_tune' | t | default: 'Ajuste fino Dorsal (+0-9%)' }}</label>
        <div class="field">
          <input type="range" id="number-fine-tune-slider" min="0" max="9" value="{{ block.settings.number_fine_tune | default: 5 }}" class="field__input customization-slider" data-setting="numberFineTune">
        </div>
         <span class="slider-value" id="number-fine-tune-value">+{{ block.settings.number_fine_tune | default: 5 }}%</span>
        </div>
    </div>
    
    <!-- Configuración de Alineación Horizontal -->
    <div class="control-group">
      <h4>{{ 'products.product.customization.alignment_settings' | t | default: 'Alineación Horizontal' }}</h4>
      
      <div class="alignment-control">
        <input type="radio" id="alignment-auto" name="horizontal-alignment" value="auto" {% if block.settings.horizontal_alignment == 'auto' or block.settings.horizontal_alignment == blank %}checked{% endif %} data-setting="horizontalAlignment">
        <label for="alignment-auto">{{ 'products.product.customization.alignment_auto' | t | default: 'Centrado Automático' }}</label>
      </div>
      
      <div class="alignment-control">
        <input type="radio" id="alignment-manual" name="horizontal-alignment" value="manual" {% if block.settings.horizontal_alignment == 'manual' %}checked{% endif %} data-setting="horizontalAlignment">
        <label for="alignment-manual">{{ 'products.product.customization.alignment_manual' | t | default: 'Posición Manual' }}</label>
      </div>
      
      <div class="slider-control manual-position" {% unless block.settings.horizontal_alignment == 'manual' %}style="display: none;"{% endunless %}>
        <label for="horizontal-position-slider">{{ 'products.product.customization.horizontal_position' | t | default: 'Posición Horizontal (%)' }}</label>
        <div class="field">
          <input type="range" id="horizontal-position-slider" min="0" max="100" value="{{ block.settings.horizontal_position | times: 100 | default: 50 }}" class="field__input customization-slider" data-setting="horizontalPosition">
        </div>
        <span class="slider-value">{{ block.settings.horizontal_position | times: 100 | default: 50 }}%</span>
      </div>
    </div>
    
    <!-- Indicaciones para el usuario en modo debug -->
    <div class="debug-instructions">
      <div class="instruction-box">
        <h4>📝 Instrucciones de Configuración</h4>
        <p><strong>¡Importante!</strong> Una vez que hayas ajustado todos los sliders y posiciones:</p>
        <ol>
          <li>Anota todos los valores mostrados en los sliders</li>
          <li>Guarda estos valores en la configuración de la sección</li>
          <li>Desactiva el modo debug para ocultar estos controles</li>
        </ol>
        <div class="values-note">
          <strong>💡 Tip:</strong> Los valores se actualizan en tiempo real en la imagen del producto.
        </div>
      </div>
    </div>
    
  {% endif %}
    </div>
  
  <!-- Selector de jugadores (dinámico desde metaobjeto) -->
  {% if block.settings.is_unisex_product %}
    <!-- Para productos unisex, preparamos ambos metaobjetos -->
    {% assign male_metaobject_definition = block.settings.players_metaobject_definition | default: 'custom_jugadores' %}
    {% assign female_metaobject_definition = block.settings.female_players_metaobject_definition | default: 'custom_jugadores_femenino' %}
    {% assign male_jugadores_metaobject_def = metaobjects[male_metaobject_definition] %}
    {% assign female_jugadores_metaobject_def = metaobjects[female_metaobject_definition] %}
    {% assign male_jugadores_metaobject_list = male_jugadores_metaobject_def.values %}
    {% assign female_jugadores_metaobject_list = female_jugadores_metaobject_def.values %}
  {% else %}
    <!-- Para productos normales, usamos solo el metaobjeto masculino -->
    {% assign metaobject_definition = block.settings.players_metaobject_definition | default: 'custom_jugadores' %}
    {% assign jugadores_metaobject_def = metaobjects[metaobject_definition] %}
    {% assign jugadores_metaobject_list = jugadores_metaobject_def.values %}
  {% endif %}
   
   <div id="customization_player_wrapper" class="customization-player-wrapper" hidden>
     <div class="customization-field">
       <label for="customization_player" id="customization_player_label">{{ block.settings.player_option_text | default: 'Jugador' }}</label>
       <div class="customization-select-wrapper">
         <select id="customization_player" name="customization_player" class="customization-select">
           {% assign player_text = block.settings.player_option_text | default: 'jugador' | downcase %}
           {% assign article = 'un' %}
           {% if player_text contains 'jugadora' or player_text contains 'atleta' %}
             {% assign article = 'una' %}
           {% endif %}
           <option value="" id="player_placeholder_option">Selecciona {{ article }} {{ player_text }}...</option>
           
           {% if block.settings.is_unisex_product %}
             <!-- Opciones masculinas -->
             <optgroup label="Masculino" class="male-players" {% if block.settings.is_unisex_product %}style="display: block;"{% endif %}>
               {% if male_jugadores_metaobject_def.values_count > 0 %}
                 {% for jugador in male_jugadores_metaobject_list %}
                   {% assign jugador_nombre = jugador.jugador.value | upcase %}
                   {% assign jugador_dorsal = jugador.dorsal.value %}
                   {% assign jugador_handle = jugador_nombre | handleize %}
                   <option 
                     value="{{ jugador_handle }}" 
                     data-name="{{ jugador_nombre }}" 
                     data-number="{{ jugador_dorsal }}"
                     data-gender="male"
                   >
                     {{ jugador_nombre }} - #{{ jugador_dorsal }}
                   </option>
                 {% endfor %}
               {% endif %}
             </optgroup>
             
             <!-- Opciones femeninas -->
             <optgroup label="Femenino" class="female-players" style="display: none;">
               {% if female_jugadores_metaobject_def.values_count > 0 %}
                 {% for jugador in female_jugadores_metaobject_list %}
                   {% assign jugador_nombre = jugador.jugador.value | upcase %}
                   {% assign jugador_dorsal = jugador.dorsal.value %}
                   {% assign jugador_handle = jugador_nombre | handleize %}
                   <option 
                     value="{{ jugador_handle }}" 
                     data-name="{{ jugador_nombre }}" 
                     data-number="{{ jugador_dorsal }}"
                     data-gender="female"
                   >
                     {{ jugador_nombre }} - #{{ jugador_dorsal }}
                   </option>
                 {% endfor %}
               {% endif %}
             </optgroup>
           {% else %}
             <!-- Para productos normales -->
             {% if jugadores_metaobject_def.values_count > 0 %}
               {% for jugador in jugadores_metaobject_list %}
                 {% assign jugador_nombre = jugador.jugador.value | upcase %}
                 {% assign jugador_dorsal = jugador.dorsal.value %}
                 {% assign jugador_handle = jugador_nombre | handleize %}
                 <option 
                   value="{{ jugador_handle }}" 
                   data-name="{{ jugador_nombre }}" 
                   data-number="{{ jugador_dorsal }}"
                 >
                   {{ jugador_nombre }} - #{{ jugador_dorsal }}
                 </option>
               {% endfor %}
             {% else %}
               <!-- Jugadores de prueba mientras se configura el metaobjeto -->
               <option value="chris-jones" data-name="CHRIS JONES" data-number="1">CHRIS JONES - #1</option>
               <option value="sergio-de-la-fuente" data-name="SERGIO DE LA FUENTE" data-number="5">SERGIO DE LA FUENTE - #5</option>
               <option value="jean-montero" data-name="JEAN MONTERO" data-number="7">JEAN MONTERO - #7</option>
               <option value="stefan-jovic" data-name="STEFAN JOVIC" data-number="10">STEFAN JOVIC - #10</option>
               <option value="victor-claver" data-name="VICTOR CLAVER" data-number="12">VICTOR CLAVER - #12</option>
               <option value="webb-simpson" data-name="WEBB SIMPSON" data-number="15">WEBB SIMPSON - #15</option>
               <option value="rafa-martinez" data-name="RAFA MARTINEZ" data-number="20">RAFA MARTINEZ - #20</option>
               <option value="josep-puerto" data-name="JOSEP PUERTO" data-number="23">JOSEP PUERTO - #23</option>
             {% endif %}
           {% endif %}
         </select>
         <svg
           aria-hidden="true"
           focusable="false"
           class="icon icon-caret"
           width="8"
           height="13"
           viewBox="0 0 8 13"
         >
           {%- render 'icon', icon: 'double-sided-caret' -%}
         </svg>
       </div>
     </div>
   </div>
  {% render 'customization-players', metaobject_definition: block.settings.players_metaobject_definition %}
  
  <!-- Campos de usuario personalizado -->
  <div id="customization_user_wrapper" class="customization-user-wrapper" hidden>
    <div class="customization-field">
      <label for="customization_user_name">Nombre:</label>
      <div class="field">
        <input type="text" id="customization_user_name" name="customization_user_name" maxlength="{{ block.settings.max_name_length | default: 15 }}" pattern="[A-Za-zÀ-ÿ\s]*" placeholder="Ingresa tu nombre" class="field__input">
      </div>
    </div>
    <div class="customization-field">
      <label for="customization_user_number">Número:</label>
      <div class="field">
        <input type="text" id="customization_user_number" name="customization_user_number" maxlength="{{ block.settings.max_number_digits | default: 2 }}" pattern="[0-9]*" inputmode="numeric" placeholder="Número" class="field__input">
      </div>
    </div>
  </div>

<!-- Hidden fields moved to buy-buttons block within product form -->

<script>
  
  // Actualizar configuraciones en tiempo real
  document.addEventListener('DOMContentLoaded', function() {
    const sliders = document.querySelectorAll('.customization-slider');
    const radioButtons = document.querySelectorAll('input[name="horizontal-alignment"]');
    const manualPositionDiv = document.querySelector('.manual-position');
    
    // Prevenir números en el campo de nombre
    const nameInput = document.querySelector('#customization_user_name');
    if (nameInput) {
      nameInput.addEventListener('keypress', function(e) {
        // Permitir teclas de control (backspace, delete, etc.)
        if (e.ctrlKey || e.altKey || e.metaKey) return;
        
        // Bloquear números (códigos 48-57)
        if (e.charCode >= 48 && e.charCode <= 57) {
          e.preventDefault();
        }
      });
      
      // También prevenir pegar números
      nameInput.addEventListener('paste', function(e) {
        setTimeout(() => {
          this.value = this.value.replace(/[0-9]/g, '');
        }, 0);
      });
    }
    
    // Sobrescribir función global para validar opciones habilitadas
    // Función para manejar la visibilidad de las listas de jugadores
    function handlePlayerListVisibility(customizationType) {
      const playerSelect = document.querySelector('#customization_player');
      if (!playerSelect) return;
      
      const maleOptgroup = playerSelect.querySelector('.male-players');
      const femaleOptgroup = playerSelect.querySelector('.female-players');
      const playerLabel = document.querySelector('#customization_player_label');
      
      // Limpiar selección actual
      playerSelect.value = '';
      
      // Actualizar texto del label y placeholder según el tipo de personalización
      const placeholderOption = document.querySelector('#player_placeholder_option');
      
      if (playerLabel) {
        if (customizationType === 'male-player') {
          playerLabel.textContent = '{{ block.settings.player_option_text | default: "Jugador" }}';
          if (placeholderOption) {
            placeholderOption.textContent = 'Selecciona un {{ block.settings.player_option_text | default: "jugador" | downcase }}...';
          }
        } else if (customizationType === 'female-player') {
          playerLabel.textContent = '{{ block.settings.female_player_option_text | default: "Jugadora" }}';
          if (placeholderOption) {
            placeholderOption.textContent = 'Selecciona una {{ block.settings.female_player_option_text | default: "jugadora" | downcase }}...';
          }
        } else {
          playerLabel.textContent = '{{ block.settings.player_option_text | default: "Jugador" }}';
          if (placeholderOption) {
            placeholderOption.textContent = 'Selecciona un {{ block.settings.player_option_text | default: "jugador" | downcase }}...';
          }
        }
      }
      
      if (customizationType === 'male-player') {
        // Mostrar solo jugadores masculinos
        if (maleOptgroup) {
          maleOptgroup.style.display = 'block';
          const maleOptions = maleOptgroup.querySelectorAll('option');
          maleOptions.forEach(option => option.disabled = false);
        }
        if (femaleOptgroup) {
          femaleOptgroup.style.display = 'none';
          const femaleOptions = femaleOptgroup.querySelectorAll('option');
          femaleOptions.forEach(option => option.disabled = true);
        }
      } else if (customizationType === 'female-player') {
        // Mostrar solo jugadoras femeninas
        if (maleOptgroup) {
          maleOptgroup.style.display = 'none';
          const maleOptions = maleOptgroup.querySelectorAll('option');
          maleOptions.forEach(option => option.disabled = true);
        }
        if (femaleOptgroup) {
          femaleOptgroup.style.display = 'block';
          const femaleOptions = femaleOptgroup.querySelectorAll('option');
          femaleOptions.forEach(option => option.disabled = false);
        }
      } else if (customizationType === 'player') {
        // Mostrar ambos grupos (comportamiento original)
        if (maleOptgroup) {
          maleOptgroup.style.display = 'block';
          const maleOptions = maleOptgroup.querySelectorAll('option');
          maleOptions.forEach(option => option.disabled = false);
        }
        if (femaleOptgroup) {
          femaleOptgroup.style.display = 'block';
          const femaleOptions = femaleOptgroup.querySelectorAll('option');
          femaleOptions.forEach(option => option.disabled = false);
        }
      }
    }
    
    window.selectCustomizationType = function(element) {
      const playerEnabled = {{ block.settings.enable_player_option | json }};
      const femalePlayerEnabled = {{ block.settings.enable_female_player_option | json }};
      const customEnabled = {{ block.settings.enable_custom_option | json }};
      const isUnisexProduct = {{ block.settings.is_unisex_product | json }};
      const value = element.dataset.value;
      
      console.log('🔧 selectCustomizationType called:', {
        value: value,
        classList: element.classList.toString(),
        isMale: element.classList.contains('male-player-option'),
        isFemale: element.classList.contains('female-player-option')
      });
      
      // Prevenir selección de opciones deshabilitadas
      if ((element.classList.contains('male-player-option') && !playerEnabled) || 
          (element.classList.contains('female-player-option') && !femalePlayerEnabled) ||
          (value === 'user' && !customEnabled)) {
        return; // No hacer nada si la opción está deshabilitada
      }
      
      // Determinar el tipo de personalización basado en la clase CSS
      let customizationType = value;
      if (value === 'player') {
        if (element.classList.contains('male-player-option')) {
          customizationType = 'male-player';
        } else if (element.classList.contains('female-player-option')) {
          customizationType = 'female-player';
        }
      }
      
      console.log('🎯 Determined customizationType:', customizationType);
      
      // Manejar la visibilidad de las listas de jugadores según el tipo
      handlePlayerListVisibility(customizationType);
      
      // Ejecutar la lógica original directamente
      // Remover clase active de todas las opciones
      const allOptions = document.querySelectorAll('.customization-option');
      allOptions.forEach(option => option.classList.remove('active'));
      
      // Agregar clase active a la opción seleccionada
      element.classList.add('active');
      
      // Actualizar el input hidden
      const hiddenInput = document.querySelector('#customization_type');
      if (hiddenInput) {
        hiddenInput.value = element.dataset.value;
        console.log('📋 Hidden input updated to:', hiddenInput.value);
        
        // Disparar evento change para mantener compatibilidad
        const changeEvent = new Event('change', { bubbles: true });
        hiddenInput.dispatchEvent(changeEvent);
        console.log('🔔 Change event dispatched');
      }
      
      // Obtener referencias a ambos selectores
      const genderSelectionWrapper = document.getElementById('gender-selection-wrapper');
      const teamPatchSelectionWrapper = document.getElementById('team-patch-selection-wrapper');
      
      // Mostrar el selector de parche solo cuando hay personalización Y el setting está habilitado
      const enableTeamPatch = {{ block.settings.enable_team_patch_selection | json }};
      const showAdvancedControls = {{ block.settings.show_advanced_controls | json }};
      
      if (enableTeamPatch || showAdvancedControls) {
        if (value === 'player' || value === 'male-player' || value === 'female-player' || value === 'user') {
          // Mostrar selector de parche cuando hay personalización y está habilitado
           if (teamPatchSelectionWrapper) {
             teamPatchSelectionWrapper.style.display = 'block';
          }
        } else {
          // Para "none", ocultar selector y limpiar valores
          if (teamPatchSelectionWrapper) {
            teamPatchSelectionWrapper.style.display = 'none';
            const formField = document.getElementById('product_form_team_patch');
            const hiddenField = document.getElementById('selected_team_patch');
            if (formField && formField.value !== '') {
              formField.value = '';
              if (window.personalizadorDebugMode) {
                console.log('Limpiando parche por "Sin personalización"');
              }
            }
            if (hiddenField && hiddenField.value !== '') {
              hiddenField.value = '';
            }
          }
        }
      } else {
        // Si el parche está deshabilitado, siempre ocultar y limpiar
        if (teamPatchSelectionWrapper) {
          teamPatchSelectionWrapper.style.display = 'none';
          const formField = document.getElementById('product_form_team_patch');
          const hiddenField = document.getElementById('selected_team_patch');
          if (formField) {
            formField.value = '';
          }
          if (hiddenField) {
            hiddenField.value = '';
          }
        }
      }
      
      // Manejar selector de género para productos unisex
      if (isUnisexProduct) {
        if (value === 'none') {
          // Para "none", ocultar selector de género
          if (genderSelectionWrapper) {
            genderSelectionWrapper.style.display = 'none';
          }
        }
      } else {
        // Para productos no unisex, siempre ocultar selector de género
        if (genderSelectionWrapper) {
          genderSelectionWrapper.style.display = 'none';
        }
      }
    };
    
    // Validar opciones habilitadas al cargar
    validateCustomizationOptions();
    
    // Activar placeholder automáticamente si los controles avanzados están activos
    {% if block.settings.show_advanced_controls and product.template_suffix == 'demo' %}
    activateDebugPlaceholder();
    {% endif %}
    
    // Función para actualizar valores
    function updateSetting(setting, value) {
      if (window.productCustomizerSettings) {
        window.productCustomizerSettings[setting] = value;
        
        // Disparar evento personalizado para que el canvas se actualice
        const event = new CustomEvent('customization-settings-changed', {
          detail: { setting, value, settings: window.productCustomizerSettings }
        });
        document.dispatchEvent(event);
      }
    }
    
    // Validar opciones habilitadas
    function validateCustomizationOptions() {
      const playerEnabled = {{ block.settings.enable_player_option | json }};
      const customEnabled = {{ block.settings.enable_custom_option | json }};
      
      // Si no hay opciones habilitadas, mantener solo "Sin personalización"
      if (!playerEnabled && !customEnabled) {
        const noneOption = document.querySelector('.customization-option[data-value="none"]');
        if (noneOption && !noneOption.classList.contains('active')) {
          selectCustomizationType(noneOption);
        }
      }
      
      // Si la opción activa está deshabilitada, cambiar a "Sin personalización"
      const activeOption = document.querySelector('.customization-option.active');
      if (activeOption) {
        const activeValue = activeOption.dataset.value;
        if ((activeValue === 'player' && !playerEnabled) || 
            (activeValue === 'user' && !customEnabled)) {
          const noneOption = document.querySelector('.customization-option[data-value="none"]');
          if (noneOption) {
            selectCustomizationType(noneOption);
          }
        }
      }
    }
    
    // Función para activar placeholder automáticamente en modo debug
    function activateDebugPlaceholder() {
      const playerEnabled = {{ block.settings.enable_player_option | json }};
      const femalePlayerEnabled = {{ block.settings.enable_female_player_option | json }};
      const customEnabled = {{ block.settings.enable_custom_option | json }};
      
      // Esperar a que el ProductCustomization esté inicializado
      setTimeout(() => {
        // Activar automáticamente la primera opción de jugador disponible
        const malePlayerOption = document.querySelector('.male-player-option');
        const femalePlayerOption = document.querySelector('.female-player-option');
        
        // Priorizar male-player, luego female-player
        let targetOption = null;
        if (playerEnabled && malePlayerOption) {
          targetOption = malePlayerOption;
        } else if (femalePlayerEnabled && femalePlayerOption) {
          targetOption = femalePlayerOption;
        }
        
        if (targetOption && window.selectCustomizationType) {
          window.selectCustomizationType(targetOption);
        } else if (customEnabled) {
          // Si ninguna opción de jugador está disponible pero custom sí, usar custom
          const customOption = document.querySelector('.customization-option[data-value="user"]');
          if (customOption && window.selectCustomizationType) {
            window.selectCustomizationType(customOption);
          }
        }
        
        // Esperar un poco más para que se inicialice el selector de jugadores
        setTimeout(() => {
          // Solo seleccionar automáticamente un jugador si no hay parámetros URL
          const urlParams = new URLSearchParams(window.location.search);
          const playerParam = urlParams.get('player');
          
          const playerSelect = document.querySelector('#customization_player');
          if (playerSelect && playerSelect.options.length > 1 && !playerParam) {
            // Solo seleccionar la primera opción si no hay jugador preseleccionado desde URL
            playerSelect.selectedIndex = 1;
            playerSelect.dispatchEvent(new Event('change', { bubbles: true }));
            
            // Navegar automáticamente a la segunda imagen
            setTimeout(() => {
              const slideshow = document.querySelector('slideshow-component');
              if (slideshow && slideshow.select) {
                slideshow.select(1);
              }
            }, 500);
          }
        }, 500);
      }, 1000);
    }
    
    // Manejar sliders
    sliders.forEach((slider, index) => {
      const valueSpan = slider.nextElementSibling;
      
      slider.addEventListener('input', function() {
        const setting = this.dataset.setting;
        let value = parseFloat(this.value);
        
        // Manejar diferentes tipos de configuraciones
        if (setting === 'nameHeightBase') {
          // Para nameHeightBase, mostrar el porcentaje (valor * 10)
          valueSpan.textContent = (value * 10) + '%';
          updateSetting(setting, value);
          // Recalcular nameHeight total
           const fineTune = window.productCustomizerSettings.nameFineTune || 5;
           const totalHeight = (value * 10 + fineTune) / 100;
           updateSetting('nameHeight', totalHeight);
        } else if (setting === 'nameFineTune') {
          // Para nameFineTune, mostrar +número%
          valueSpan.textContent = '+' + value + '%';
          updateSetting(setting, value);
          // Recalcular nameHeight total
           const baseHeight = window.productCustomizerSettings.nameHeightBase || 1;
           const totalHeight = (baseHeight * 10 + value) / 100;
           updateSetting('nameHeight', totalHeight);
        } else if (setting === 'numberHeightBase') {
          // Para numberHeightBase, mostrar el porcentaje (valor * 10)
          valueSpan.textContent = (value * 10) + '%';
          updateSetting(setting, value);
          // Recalcular numberHeight total
            const fineTune = window.productCustomizerSettings.numberFineTune || 5;
           const totalHeight = (value * 10 + fineTune) / 100;
           updateSetting('numberHeight', totalHeight);
        } else if (setting === 'numberFineTune') {
          // Para numberFineTune, mostrar +número%
          valueSpan.textContent = '+' + value + '%';
          updateSetting(setting, value);
          // Recalcular numberHeight total
           const baseHeight = window.productCustomizerSettings.numberHeightBase || 4;
           const totalHeight = (baseHeight * 10 + value) / 100;
           updateSetting('numberHeight', totalHeight);
        } else if (setting === 'numberHeight' || setting === 'horizontalPosition') {
          value = value / 100;
          valueSpan.textContent = Math.round(value * 100) + '%';
          updateSetting(setting, value);
        } else {
          valueSpan.textContent = value + (setting.includes('Size') ? 'px' : '');
          updateSetting(setting, value);
        }
      });
    });
    
    // Manejar radio buttons de alineación
    radioButtons.forEach(radio => {
      radio.addEventListener('change', function() {
        if (this.checked) {
          updateSetting('alignmentMode', this.value);
          
          // Mostrar/ocultar slider de posición manual
          if (this.value === 'manual') {
            manualPositionDiv.style.display = 'block';
          } else {
            manualPositionDiv.style.display = 'none';
          }
        }
      });
    });
  });
</script>

<style>
  .product-customization-settings {
    border-radius: 8px;
    margin: 20px 0;
  }
  
  .customization-type-wrapper {
    margin-bottom: 20px;
  }
  
  .customization-type-wrapper label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }
  
  .customization-type-wrapper select {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    background-color: white;
  }
  
  .customization-controls {
    display: grid;
    gap: 20px;
  }
  
  .control-group {
    background: white;
    padding: 15px;
    border-radius: 6px;
    border: 1px solid #e0e0e0;
  }
  
  .control-group h4 {
    margin: 0 0 15px 0;
    color: #333;
    font-size: 16px;
  }
  
  .slider-control {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
  }
  
  .slider-control label {
    min-width: 150px;
    font-size: 14px;
    color: #666;
  }
  
  .customization-slider {
    flex: 1;
    height: 6px;
    background: var(--color-input-background, #ddd);
    border-radius: 3px;
    outline: none;
    opacity: 0.7;
    transition: opacity 0.2s, box-shadow var(--animation-speed) ease, background-color var(--animation-speed) ease;
    appearance: none;
    border: none;
    padding: 0;
  }
  
  .customization-slider:hover {
    opacity: 1;
    background-color: var(--color-input-hover-background, #ccc);
  }
  
  .customization-slider:focus {
    box-shadow: var(--input-box-shadow-focus, 0 0 0 2px rgba(0, 124, 186, 0.3));
  }
  
  .customization-slider::-webkit-slider-thumb {
    appearance: none;
    width: 20px;
    height: 20px;
    background: var(--color-primary, #007cba);
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid var(--color-background, #fff);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .customization-slider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--color-primary, #007cba);
    cursor: pointer;
    border: 2px solid var(--color-background, #fff);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .slider-value {
    min-width: 60px;
    text-align: right;
    font-weight: bold;
    color: #333;
  }
  
  /* Estilos para las indicaciones de debug */
  .debug-instructions {
    margin-top: 20px;
    margin-bottom: 20px;
  }
  
  .instruction-box {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    border: 2px solid #ffc107;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(255, 193, 7, 0.2);
  }
  
  .instruction-box h4 {
    margin: 0 0 15px 0;
    color: #856404;
    font-size: 18px;
    font-weight: bold;
  }
  
  .instruction-box p {
    margin: 0 0 15px 0;
    color: #856404;
    font-size: 14px;
  }
  
  .instruction-box ol {
    margin: 0 0 15px 0;
    padding-left: 20px;
    color: #856404;
  }
  
  .instruction-box li {
    margin-bottom: 8px;
    font-size: 14px;
  }
  
  .values-note {
    background: rgba(255, 255, 255, 0.7);
    padding: 12px;
    border-radius: 6px;
    border-left: 4px solid #28a745;
    margin-top: 15px;
  }
  
  .values-note strong {
    color: #155724;
  }
  
  .alignment-control {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 10px;
  }
  
  .alignment-control input[type="radio"] {
    margin: 0;
  }
  
  .alignment-control label {
    font-size: 14px;
    color: #666;
    cursor: pointer;
  }
  
  .manual-position {
    margin-left: 20px;
    padding-top: 10px;
    border-top: 1px solid #eee;
  }
  
  /* Estilos para campos de personalización */
  .customization-player-wrapper,
  .customization-user-wrapper {
    margin-top: 10px;
  }

  .customization-select-wrapper {
    display: flex;
    position: relative;
    border: var(--style-border-width-inputs) solid var(--color-border);
    border-radius: var(--style-border-radius-inputs);
    align-items: center;
    margin-top: var(--margin-2xs);
    overflow: clip;
    transition: background-color var(--animation-speed) var(--animation-easing),
      border-color var(--animation-speed) var(--animation-easing);
  }

  .customization-select-wrapper:hover {
    border-color: var(--color-variant-hover-border);
  }
  
  /* Estilos para debug */
  .debug-info {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 6px;
    font-size: 12px;
    color: #6c757d;
    font-family: monospace;
  }
  
  .debug-info h4 {
    margin: 0 0 10px 0;
    color: #495057;
    font-size: 14px;
    font-weight: bold;
  }
  
  .debug-info p {
    margin: 5px 0;
  }
  
  /* Estilos para selección de género */
  .gender-selection {
    margin-bottom: 20px;
  }
  
  .gender-selection label {
    display: block;
    margin-bottom: 10px;
    font-weight: bold;
    color: #333;
  }
  
  .gender-options {
    display: flex;
    gap: 10px;
  }
  
  .gender-option {
    flex: 1;
    padding: var(--button-padding-block) var(--button-padding-inline);
    border: var(--style-border-width-primary) solid var(--color-secondary-button-border);
    background: var(--color-secondary-button-background);
    cursor: pointer;
    text-align: center;
    border-radius: var(--style-border-radius-buttons-primary);
    transition: color var(--animation-speed) var(--animation-easing),
      box-shadow var(--animation-speed) var(--animation-easing),
      background-color var(--animation-speed) var(--animation-easing);
    font-family: var(--button-font-family-primary);
    font-weight: var(--button-font-weight-primary);
    text-transform: var(--button-text-case-primary);
    color: var(--color-secondary-button-text);
    font-size: var(--font-paragraph--size);
    line-height: var(--font-paragraph--line-height);
  }
  
  .gender-option:hover {
    color: var(--color-foreground);
    background-color: var(--color-border);
    border-color: var(--color-primary);
  }
  
  .gender-option.active {
    color: var(--color-primary-button-text);
    background-color: var(--color-primary-button-background);
    border-color: var(--color-primary-button-border);
  }
  
  .gender-option.active:hover {
    color: var(--color-primary-button-text);
    background-color: var(--color-primary-button-background);
    border-color: var(--color-primary-button-border);
  }
  
  /* Estilos para selector de parche de equipo */
  .team-patch-selection-wrapper {
    margin-top: var(--margin-md);
  }
  
  .team-patch-options {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--gap-sm);
    width: auto;
  }
  
  .team-patch-option {
    display: flex;
    flex: 0 0 auto;
    align-items: center;
    position: relative;
    padding-block: var(--padding-sm);
    padding-inline: var(--padding-lg);
    border: var(--variant-picker-button-border-width, 1px) solid var(--color-variant-border);
    border-radius: var(--variant-picker-button-radius, var(--border-radius));
    overflow: clip;
    justify-content: center;
    min-height: calc(3ch + 1.3em);
    width: auto;
    white-space: nowrap;
    background-color: var(--color-variant-background);
    color: var(--color-variant-text);
    cursor: pointer;
    transition: background-color var(--animation-speed) var(--animation-easing),
      border-color var(--animation-speed) var(--animation-easing);
    user-select: none;
    gap: 0.5rem;
    flex-direction: row;
  }
  
  .team-patch-option:hover {
    background-color: var(--color-variant-hover-background);
    border-color: var(--color-variant-hover-border);
    color: var(--color-variant-hover-text);
  }
  
  .team-patch-option.active {
    color: var(--color-selected-variant-text);
    background-color: var(--color-selected-variant-background);
    border-color: var(--color-selected-variant-border);
    transition: background-color var(--animation-speed) var(--animation-easing),
      border-color var(--animation-speed) var(--animation-easing);
  }
  
  .team-patch-option.active:hover {
    background-color: var(--color-selected-variant-hover-background);
    border-color: var(--color-selected-variant-hover-border);
    color: var(--color-selected-variant-hover-text);
  }
  
  .team-patch-option:focus-visible {
    border-color: var(--color-foreground);
    outline: var(--focus-outline-width) solid var(--color-foreground);
    outline-offset: var(--focus-outline-offset);
  }
   
   /* Estilos para ocultar grupos de jugadores */
   .customization-select optgroup[style*="display: none"] {
     display: none !important;
   }
   
   .customization-select optgroup.male-players {
     display: block;
   }
   
   .customization-select optgroup.female-players {
     display: none;
   }
   
   /* Cuando el producto es unisex y se selecciona femenino */
   .unisex-product.female-selected .customization-select optgroup.male-players {
     display: none !important;
   }
   
   .unisex-product.female-selected .customization-select optgroup.female-players {
     display: block !important;
   }

  .customization-select {
    padding-block: var(--padding-md);
    padding-inline: var(--padding-lg) calc(var(--padding-lg) + var(--icon-size-2xs));
    appearance: none;
    border: 0;
    width: 100%;
    margin: 0;
    cursor: pointer;
    font: inherit;
    background-color: var(--color-background);
    color: currentcolor;
  }

  .customization-select:focus-visible {
    outline: var(--focus-outline-width) solid currentcolor;
    outline-offset: var(--focus-outline-offset);
  }

  .customization-select-wrapper .icon {
    position: absolute;
    right: var(--padding-md);
    top: 50%;
    transform: translateY(-50%);
    width: var(--icon-size-2xs);
    height: var(--icon-size-2xs);
    pointer-events: none;
  }
  
  .customization-field {
    margin-bottom: 15px;
  }
  
  .customization-field:last-child {
    margin-bottom: 0;
  }
  
  .customization-field label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #333;
  }
  
  .customization-field .field {
    margin-top: 0;
  }
  
  .customization-field .field__input {
     font-size: var(--font-paragraph--size);
   }

  /* Clases dinámicas para tamaños de fuente del nombre */
  .customization-field .field__input.large-font {
    font-size: {{ block.settings.large_font_size | default: 24 }}px;
  }

  .customization-field .field__input.small-font {
    font-size: {{ block.settings.small_font_size | default: 18 }}px;
  }
  
  
  
  @media (max-width: 768px) {
    .slider-control {
      flex-direction: column;
      align-items: stretch;
    }
    
    .slider-control label {
      min-width: auto;
      margin-bottom: 5px;
    }
  }
</style>
</div>

<!-- Preload the DaggerSquare font for better performance -->
<link rel="preload" href="{{ 'daggersquare.ttf' | asset_url }}" as="font" type="font/ttf" crossorigin>

<script src="{{ 'product-customization.js' | asset_url }}" defer></script>


<script>
  // Exponer configuraciones a JavaScript
  window.productCustomizerSettings = {
    nameSize: {{ block.settings.name_size | default: 37 }},
    nameHeight: {{ block.settings.name_height_base | default: 1 | times: 10 | plus: block.settings.name_fine_tune | default: 5 | divided_by: 100.0 }},
    nameHeightBase: {{ block.settings.name_height_base | default: 1 }},
    numberSize: {{ block.settings.number_size | default: 160 }},
    numberHeight: {{ block.settings.number_height_base | default: 4 | times: 10 | plus: block.settings.number_fine_tune | default: 5 | divided_by: 100.0 }},
    numberHeightBase: {{ block.settings.number_height_base | default: 4 }},
    numberFineTune: {{ block.settings.number_fine_tune | default: 5 }},
    alignmentMode: '{{ block.settings.horizontal_alignment | default: "auto" }}',
    horizontalPosition: {{ block.settings.horizontal_position | default: 0.5 }},
    maxNameLength: {{ block.settings.max_name_length | default: 15 }},
    maxNumberDigits: {{ block.settings.max_number_digits | default: 2 }},
    characterLimitThreshold: {{ block.settings.character_limit_threshold | default: 7 }},
    largeFontSize: {{ block.settings.large_font_size | default: 24 }},
    smallFontSize: {{ block.settings.small_font_size | default: 18 }},
    textColor: '{{ block.settings.text_color | default: "#FFFFFF" }}',
    targetImageIndex: {{ global_target_image_index | default: block.settings.target_image_index | default: 2 }},
    navigationImageIndex: {{ global_navigation_image_index | default: block.settings.navigation_image_index | default: 2 }},
    fontUrl: '{{ "daggersquare.ttf" | asset_url }}' // URL completa del asset
  };
  
  // Inicializar event listeners para los sliders de debug
  document.addEventListener('DOMContentLoaded', function() {
    const sliders = document.querySelectorAll('.customization-slider');
    
    sliders.forEach(slider => {
      slider.addEventListener('input', function(e) {
        const setting = e.target.dataset.setting;
        const value = parseFloat(e.target.value);
        
        // Actualizar el valor mostrado
        const valueSpan = e.target.closest('.slider-control').querySelector('.slider-value');
        if (valueSpan) {
          switch(setting) {
            case 'nameSize':
              valueSpan.textContent = value + 'px';
              window.productCustomizerSettings.nameSize = value;
              break;
            case 'nameHeightBase':
              valueSpan.textContent = (value * 10) + '%';
              window.productCustomizerSettings.nameHeightBase = value;
              // Recalcular nameHeight combinando base + fine tune
              const nameFineTune = window.productCustomizerSettings.nameFineTune || 5;
              window.productCustomizerSettings.nameHeight = (value * 10 + nameFineTune) / 100;
              break;
            case 'nameFineTune':
              valueSpan.textContent = '+' + value + '%';
              window.productCustomizerSettings.nameFineTune = value;
              // Recalcular nameHeight combinando base + fine tune
              const nameHeightBase = window.productCustomizerSettings.nameHeightBase || 1;
              window.productCustomizerSettings.nameHeight = (nameHeightBase * 10 + value) / 100;
              break;
            case 'numberSize':
              valueSpan.textContent = value + 'px';
              window.productCustomizerSettings.numberSize = value;
              break;
            case 'numberHeightBase':
              valueSpan.textContent = (value * 10) + '%';
              window.productCustomizerSettings.numberHeightBase = value;
              // Recalcular numberHeight combinando base + fine tune
              const numberFineTune = window.productCustomizerSettings.numberFineTune || 5;
              window.productCustomizerSettings.numberHeight = (value * 10 + numberFineTune) / 100;
              break;
            case 'numberFineTune':
              valueSpan.textContent = '+' + value + '%';
              window.productCustomizerSettings.numberFineTune = value;
              // Recalcular numberHeight combinando base + fine tune
              const numberHeightBase = window.productCustomizerSettings.numberHeightBase || 4;
              window.productCustomizerSettings.numberHeight = (numberHeightBase * 10 + value) / 100;
              break;
            case 'horizontalPosition':
              valueSpan.textContent = value;
              window.productCustomizerSettings.horizontalPosition = value;
              break;
          }
        }
        
        // Disparar evento personalizado para que el canvas se actualice
        const customEvent = new CustomEvent('customization-settings-changed', {
          detail: { setting, value }
        });
        document.dispatchEvent(customEvent);
      });
    });
    
    // Manejar cambios en el radio button de alineación
    const alignmentRadios = document.querySelectorAll('input[name="horizontal_alignment"]');
    alignmentRadios.forEach(radio => {
      radio.addEventListener('change', function(e) {
        window.productCustomizerSettings.alignmentMode = e.target.value;
        
        // Mostrar/ocultar el slider de posición manual
        const manualPositionDiv = document.querySelector('.manual-position');
        if (manualPositionDiv) {
          manualPositionDiv.style.display = e.target.value === 'manual' ? 'block' : 'none';
        }
        
        // Disparar evento personalizado
        const customEvent = new CustomEvent('customization-settings-changed', {
          detail: { setting: 'alignmentMode', value: e.target.value }
        });
        document.dispatchEvent(customEvent);
      });
    });
  });

</script>

{% schema %}
{
  "name": "Personalización Camiseta",
  "tag": "section",
  "class": "section-product-customization",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_advanced_controls",
      "label": "Mostrar controles de configuración avanzada",
      "info": "Mostrar controles de configuración avanzada (nombre, dorsal y alineación). Solo se debe activar en la plantilla de producto llamada 'demo'",
      "default": false
    },
    {
      "type": "header",
      "content": "Configuración del Nombre",
      "info": "Solo visible cuando los controles avanzados están activados"
    },
    {
      "type": "range",
      "id": "name_size",
      "min": 20,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Tamaño del Nombre",
      "default": 37,
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
    {
      "type": "range",
      "id": "name_height_base",
      "min": 0,
      "max": 9,
      "step": 1,
      "label": "Altura del Nombre Base (0-9)",
      "info": "Cada paso representa 10%. Valor 0 = 0%, valor 9 = 90%",
      "default": 1,
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
    {
      "type": "range",
      "id": "name_fine_tune",
      "min": 0,
      "max": 9,
      "step": 1,
      "label": "Fine Tune del Nombre (0-9)",
      "info": "Ajuste fino que se suma al valor base. Total = (Base × 10) + Fine Tune",
      "default": 5,
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
     {
      "type": "range",
      "id": "name_curve",
      "min": 0,
      "max": 0,
      "step": 1,
      "label": "Radio de Curvatura del Nombre (Deshabilitado)",
      "default": 0,
      "info": "Esta opción está deshabilitada debido a problemas de funcionalidad",
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
    {
      "type": "header",
      "content": "Configuración del Dorsal",
      "info": "Solo visible cuando los controles avanzados están activados"
    },
    {
      "type": "range",
      "id": "number_size",
      "min": 30,
      "max": 250,
      "step": 5,
      "unit": "px",
      "label": "Tamaño del Dorsal",
      "default": 160,
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
    {
      "type": "range",
      "id": "number_height_base",
      "min": 0,
      "max": 9,
      "step": 1,
      "label": "Altura del Dorsal Base (0-9)",
      "info": "Cada paso representa 10%. Valor 0 = 0%, valor 9 = 90%",
      "default": 4,
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
    {
      "type": "range",
      "id": "number_fine_tune",
      "min": 0,
      "max": 9,
      "step": 1,
      "label": "Fine Tune del Dorsal (0-9)",
      "info": "Ajuste fino que se suma al valor base. Total = (Base × 10) + Fine Tune",
      "default": 5,
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
    {
      "type": "header",
      "content": "Alineación Horizontal",
      "info": "Solo visible cuando los controles avanzados están activados"
    },
    {
      "type": "radio",
      "id": "horizontal_alignment",
      "label": "Tipo de Alineación",
      "options": [
        {
          "value": "auto",
          "label": "Centrado Automático"
        },
        {
          "value": "manual",
          "label": "Posición Manual"
        }
      ],
      "default": "auto",
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
    {
      "type": "range",
      "id": "horizontal_position",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Posición Horizontal Manual (0-1)",
      "info": "Solo se usa cuando la alineación es manual. 0 = izquierda, 0.5 = centro, 1 = derecha",
      "default": 0.5,
      "visible_if": "{{ block.settings.show_advanced_controls }}"
    },
    {
      "type": "header",
      "content": "Opciones de Personalización"
    },
    {
      "type": "checkbox",
      "id": "is_unisex_product",
      "label": "Producto Unisex",
      "info": "Activar para productos unisex que permiten seleccionar entre jugadores masculinos y femeninos",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "Modo Debug",
      "info": "Mostrar información de debug para verificar si el producto es unisex o no",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_player_option",
      "label": "Habilitar opción de Jugador",
      "info": "Permite a los usuarios seleccionar jugadores predefinidos",
      "default": true
    },
    {
      "type": "text",
      "id": "player_option_text",
      "label": "Texto para opción de Jugador",
      "info": "Personaliza el texto que se muestra para la opción de jugador (por defecto: 'Jugador')",
      "default": "Jugador",
      "visible_if": "{{ block.settings.enable_player_option }}"
    },
    {
      "type": "checkbox",
      "id": "enable_female_player_option",
      "label": "Habilitar opción de Jugadora",
      "info": "Permite a los usuarios seleccionar jugadoras predefinidas",
      "default": true
    },
    {
      "type": "text",
      "id": "female_player_option_text",
      "label": "Texto para opción de Jugadora",
      "info": "Personaliza el texto que se muestra para la opción de jugadora (por defecto: 'Jugadora')",
      "default": "Jugadora",
      "visible_if": "{{ block.settings.enable_female_player_option }}"
    },
    {
      "type": "checkbox",
      "id": "enable_custom_option",
      "label": "Habilitar opción Personalizado",
      "info": "Permite a los usuarios crear personalizaciones propias",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_team_patch_selection",
      "label": "Habilitar selección de parche de equipo",
      "info": "Permite al usuario elegir entre parche masculino o femenino",
      "default": false,
      "visible_if": "{{ block.settings.enable_player_option or block.settings.enable_custom_option }}"
    },
    {
      "type": "header",
      "content": "Configuración de Precios"
    },
    {
       "type": "checkbox",
       "id": "free_customization",
       "label": "Personalización gratuita",
       "info": "Si está activado, la personalización se añade al producto base sin coste adicional. Si está desactivado, se añade un producto extra de personalización con coste",
       "default": true
     },
    {
      "type": "header",
      "content": "Configuración de Jugadores"
    },
    {
      "type": "text",
      "id": "players_metaobject_definition",
      "label": "Definición de Metaobjeto de Jugadores Masculinos",
      "info": "Handle de la definición de metaobjeto que contiene los jugadores masculinos (ej: custom_jugadores)",
      "default": "custom_jugadores"
    },
    {
      "type": "text",
      "id": "female_players_metaobject_definition",
      "label": "Definición de Metaobjeto de Jugadores Femeninos",
      "info": "Handle de la definición de metaobjeto que contiene los jugadores femeninos (ej: custom_jugadores_femenino). Solo se usa en productos unisex",
      "default": "custom_jugadores_femenino"
    },
    {
      "type": "header",
      "content": "Límites de Personalización"
    },
    {
      "type": "range",
      "id": "max_name_length",
      "min": 5,
      "max": 20,
      "step": 1,
      "label": "Máximo de caracteres para el nombre",
      "default": 15
    },
    {
      "type": "range",
      "id": "max_number_digits",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Máximo de dígitos para el dorsal",
      "default": 2
    },
    {
      "type": "header",
      "content": "Configuración de Tamaños de Fuente"
    },
    {
      "type": "range",
      "id": "character_limit_threshold",
      "min": 3,
      "max": 15,
      "step": 1,
      "label": "Límite de caracteres para cambio de tamaño",
      "info": "Nombres con menos caracteres usarán el tamaño grande, nombres con más caracteres usarán el tamaño pequeño",
      "default": 7
    },
    {
      "type": "range",
      "id": "large_font_size",
      "min": 12,
      "max": 48,
      "step": 1,
      "unit": "px",
      "label": "Tamaño de fuente para nombres cortos",
      "info": "Tamaño aplicado a nombres con pocos caracteres",
      "default": 24
    },
    {
      "type": "range",
      "id": "small_font_size",
      "min": 8,
      "max": 32,
      "step": 1,
      "unit": "px",
      "label": "Tamaño de fuente para nombres largos",
      "info": "Tamaño aplicado a nombres con muchos caracteres",
      "default": 18
    },
    {
      "type": "header",
      "content": "Configuración de Colores"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Color del texto (nombre y número)",
      "info": "Color que se aplicará tanto al nombre como al número en el canvas",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "Configuración de Navegación"
    },
    {
      "type": "range",
      "id": "target_image_index",
      "min": 1,
      "max": 10,
      "step": 1,
      "label": "Imagen de destino al personalizar",
      "info": "Índice de la imagen a mostrar cuando se activa la personalización (1 = primera imagen, 2 = segunda imagen, etc.)",
      "default": 2
    }
  ],
  "presets": [
    {
      "name": "Personalización Camiseta"
    }
  ]
}
{% endschema %}